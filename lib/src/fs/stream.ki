
header "sys" as sys;

use mem;

func open(path: String, read: bool, write: bool) FileStream !open {
    let fd = open_fd(path, read, write) !! throw open;;
    return FileStream{ path: path, fd: fd, can_read: read, can_write: write };
}

class FileStream {
    readonly path: String;
    private fd: i32 ;
    private can_read: bool;
    private can_write: bool;
    readonly reading: bool = true;

    func read(bytes: uxx = 10240) String !read_err {
        if(this.can_read == false){
            return "";
        }
        if(this.reading == false) {
            return "";
        }
        let buf = @stack_alloc(bytes);
        let rcount = sys.read(this.fd, buf, bytes);
        if(rcount < 0){
            throw read_err;
        }

		rep rcount = rcount @as uxx;
        let str = String.make_empty(rcount);
        mem:copy(buf, str.data(), rcount);

        if(rcount < bytes) {
            this.close();
            this.reading = false;
        }

        return str;
    }

    func close() void {
        if(this.reading) {
            let check = sys.close(this.fd);
        }
    }

    func __before_free() void {
        this.close();
    }
}
