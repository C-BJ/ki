
header "sys" as sys;

use mem;
use utils;

class Poll {
    #if OS == linux
    private fd: i32;
    #else
    private poll_size: uxx;
    private poll_index: uxx = 0;
    private lsn_by_fd: ptr;
    private lsn_by_fd_size: uxx = 20;
    #end

    private resultc: uxx = 0;
    readonly results: ptr;
    private results_int: ptr;
    //
    private pool: utils:Pool[PollListener];
    private listeners: Array[PollListener] = Array[PollListener].init();
    readonly max_connections: uxx;

    public static func init(max_connections: uxx) Poll {

        #if OS == linux
        let fd = sys.epoll_create(1);
        let results = mem:calloc(@sizeof_class(sys.cstruct_epoll_event) * 20);
        #else
        let results = mem:calloc(@sizeof_class(sys.cstruct_pollfd) * 20);
        let lsn_by_fd = mem:calloc(@sizeof(ptr) * 20);
        CLASS.disable_poll_fds(results, 0, 20);
        #end

        let results_int = mem:calloc(@sizeof_class(PollEvent) * 20);

        #if OS == linux
        return Poll {
            fd: fd,
            results: results,
            results_int: results_int,
            pool: utils:Pool[PollListener].init(max_connections),
            max_connections: max_connections,
        };
        #else
        return Poll {
            poll_size: 20,
            lsn_by_fd: lsn_by_fd,
            lsn_by_fd_size: 20,
            results: results,
            results_int: results_int,
            pool: utils:Pool[PollListener].init(max_connections),
            max_connections: max_connections,
        };
        #end
    }

    #if OS != linux
    private static func disable_poll_fds(list: ptr, start_index: uxx, count: uxx) void {
        let i = start_index;
        let last = i + count;
        while i < last {
            let event = (list + @sizeof_class(sys.cstruct_pollfd) * i) @as sys.cstruct_pollfd;
            event.fd = -1;
            i++;
        }
    }
    #end

    public func listener(fd: i32, key: uxx = 0) PollListener {

        let pool = this.pool;
        let listeners = this.listeners;

        let lsn = pool.pop() !? @vs : PollListener {
            #if OS == linux
            let new = PollListener {
                poll_fd: this.fd,
                fd: fd,
                key: key,
            };
            #else
            let new = PollListener {
                poll: this @as ptr,
                poll_index: this.poll_index++,
                fd: fd,
                key: key,
            };
            #end
            //listeners.push(new);
            return new;
        };

        lsn.fd = fd;
        lsn.key = key;

        #if OS == linux
        let ev = @stack_object(sys.cstruct_epoll_event);
        ev.events = 0;
        ev.data = lsn @as ptr;
        let res = sys.epoll_ctl(this.fd, sys.OS.EPOLL_CTL_ADD, fd, ev);
        if res != 0 {
            //println("> Failed to add epoll listener");
        }
        #else
        if lsn.poll_index >= this.poll_size {
            let old_size = this.poll_size;
            let new_size = old_size * 2;
            let new_results = mem:calloc(@sizeof_class(sys.cstruct_pollfd) * new_size);
            mem:copy(this.results, new_results, @sizeof_class(sys.cstruct_pollfd) * old_size);
            mem:free(this.results);
            CLASS.disable_poll_fds(new_results, old_size, old_size);
            this.poll_size = new_size;
            this.results = new_results;
            //
            mem:free(this.results_int);
            this.results_int = mem:calloc(@sizeof_class(PollEvent) * new_size);
        }
        if fd @as uxx >= this.lsn_by_fd_size {
            let old_size = this.lsn_by_fd_size;
            let new_size = old_size * 2;
            let new_list = mem:calloc(@sizeof_class(ptr) * new_size);
            mem:copy(this.lsn_by_fd, new_list, @sizeof(ptr) * old_size);
            mem:free(this.lsn_by_fd);
            this.lsn_by_fd_size = new_size;
            this.lsn_by_fd = new_list;
        }
        let events = this.results;
        let event = (events + @sizeof_class(sys.cstruct_pollfd) * lsn.poll_index) @as sys.cstruct_pollfd;
        event.fd = fd;
        event.events = 0;
        let lsn_by_fd = this.lsn_by_fd;
        @ptrv(lsn_by_fd, PollListener, fd) = lsn;
        #end

        return lsn;
    }

    public func remove(listener: PollListener) void {

        #if OS == linux
        let ev = @stack_object(sys.cstruct_epoll_event);
        ev.events = 0;
        let res = sys.epoll_ctl(this.fd, sys.OS.EPOLL_CTL_DEL, listener.fd, ev);
        #else
        let events = this.results;
        let event = (events + @sizeof_class(sys.cstruct_pollfd) * listener.poll_index) @as sys.cstruct_pollfd;
        event.fd = -1;
        #end

        this.pool.add(listener)!;
    }

    public func wait(timeout: i32 = -1) uxx {

        let results = this.results;

        #if OS == linux
        let event_count = sys.epoll_wait(this.fd, results, 10, timeout);
        if event_count < 0 {
            this.resultc = 0;
            return 0;
        }
        rep event_count = event_count @as uxx;
        this.resultc = event_count;
        let results_int = this.results_int;

        let i : uxx = 0;
        while i < event_count {
            let e = (results + (i * @sizeof_class(sys.cstruct_epoll_event))) @as sys.cstruct_epoll_event;
            let ei = (results_int + (i * @sizeof_class(PollEvent))) @as PollEvent;
            i++;
            ei.events = e.events;
            ei.listener = e.data @as PollListener;
        }
        #else
        if this.poll_index == 0 {
            return 0;
        }
        let events = this.results;
        let event_count = sys.poll(events, this.poll_index @as u32, timeout);
        if event_count < 0 {
            this.resultc = 0;
            return 0;
        }
        rep event_count = event_count @as uxx;
        this.resultc = event_count;
        let results_int = this.results_int;
        let lsn_by_fd = this.lsn_by_fd;

        let i : uxx = 0;
        let ri : uxx = 0;
        let last = this.poll_index;
        while i < last {
            let event = (events + @sizeof_class(sys.cstruct_pollfd) * i) @as sys.cstruct_pollfd;
            i++;
            if event.fd == -1 : continue;
            if event.revents == 0 : continue;

            let ei = (results_int + (ri * @sizeof_class(PollEvent))) @as PollEvent;
            ri++;
            ei.events = event.revents @as u32;
            ei.listener = @ptrv(lsn_by_fd, PollListener, event.fd);
        }
        #end

        return event_count;
    }

    public func get_event(index: uxx) &PollEvent !invalid_index {
        if(index >= this.resultc) {
            throw invalid_index;
        }
        let results_int = this.results_int;
        return (results_int + (index * @sizeof_class(PollEvent))) @as PollEvent;
    }

    public func __before_free() void {

        while true {
            let item = this.listeners.pop() !! break;;
            item.__free();
        }

        mem:free(this.results);
        mem:free(this.results_int);
    }
}

struct PollListener {
    #if OS == linux
    private poll_fd: i32;
    #else
    private poll: ptr;
    readonly poll_index: uxx;
    #end
    readonly key: uxx = 0;
    readonly fd : i32 = -1;
    private detect_events: u32 = 0;

    public func read(v: bool) void {
        #if OS == linux
        let ev : u32 = sys.OS.EPOLLIN;
        #else
        let ev : u32 = sys.OS.POLLIN;
        #end
        this.update_event(v, ev);
    }
    public func write(v: bool) void {
        #if OS == linux
        let ev : u32 = sys.OS.EPOLLOUT;
        #else
        let ev : u32 = sys.OS.POLLOUT;
        #end
        this.update_event(v, ev);
    }
    public func stopped_reading(v: bool) void {
        #if OS == win
        return;
        #else

        #if OS == linux
        let ev : u32 = sys.OS.EPOLLRDHUP;
        #else
        let ev : u32 = sys.OS.POLLRDHUP;
        #end
        this.update_event(v, ev);

        #end
    }
    private func update_event(v: bool, ev: u32) void {
        if(v) {
            this.detect_events = this.detect_events | ev;
        } else if (this.detect_events & ev) > 0 {
            this.detect_events = this.detect_events ^ ev;
        }

        #if OS == linux
        let evo = @stack_object(sys.cstruct_epoll_event);
        evo.events = this.detect_events;
        evo.data = this @as ptr;
        let res = sys.epoll_ctl(this.poll_fd, sys.OS.EPOLL_CTL_MOD, this.fd, evo);
        if res != 0 {
            //println("> Failed to update epoll events");
        }
        #else
        let p = this.poll @as *Poll;
        let events = p.results;
        let event = (events + @sizeof_class(sys.cstruct_pollfd) * this.poll_index) @as sys.cstruct_pollfd;
        event.events = this.detect_events @as i16;
        #end
    }
}

struct PollEvent {
    readonly listener: PollListener;
    readonly events: u32;

    public func is_readable() bool %inline {
        #if OS == linux
        let ev : u32 = sys.OS.EPOLLIN;
        #else
        let ev : u32 = sys.OS.POLLIN;
        #end
        return (this.events & ev) > 0;
    }
    public func is_writable() bool %inline {
        #if OS == linux
        let ev : u32 = sys.OS.EPOLLOUT;
        #else
        let ev : u32 = sys.OS.POLLOUT;
        #end
        return (this.events & ev) > 0;
    }

    public func is_stopped_reading() bool %inline {
        #if OS == win
        return false;
        #else

        #if OS == linux
        let ev : u32 = sys.OS.EPOLLRDHUP;
        #else
        let ev : u32 = sys.OS.POLLRDHUP;
        #end
        return (this.events & ev) > 0;

        #end
    }

    public func wants_to_close() bool %inline {
        let evs = this.events;
        #if OS == linux
        return (evs & sys.OS.EPOLLRDHUP) > 0 || (evs & sys.OS.EPOLLHUP) > 0 || (evs & sys.OS.EPOLLERR) > 0;
        #elif OS == macos
        return (evs & sys.OS.EPOLLRDHUP) > 0 || (evs & sys.OS.EPOLLHUP) > 0 || (evs & sys.OS.EPOLLERR) > 0;
        #else
        return (evs & sys.OS.POLLHUP) > 0 || (evs & sys.OS.POLLERR) > 0;
        #end
    }
}


