
header "ki_os" as kos;

use mem;

class Poll {
	readonly os_poll: ptr;
	private listeners: Array[PollListener] = Array[PollListener].init();
	public compress: bool = false;

	public static func init() .Poll {
		let p = kos.ki_os__poll_init();
		let x = Poll {
			os_poll: p
		};
		return x;
	}

	public func listener(fd: i32, key: uxx = 0) .PollListener {
		let lsn = PollListener {
			os_poll: this.os_poll,
			fd: fd,
			key: key,
		};

		kos.ki_os__poll_new_fd(this.os_poll, lsn);

		this.listeners.push(lsn);
		return lsn;
	}

	public func remove(listener: PollListener) void {
		kos.ki_os__poll_remove_fd(this.os_poll, listener);
		listener.fd = -1;
		this.compress = true;
	}

	public func wait(timeout: i32 = -1) PollResult {
		if this.compress {
			let list = this.listeners;
			let count = list.length;
			let mut i = 0#uxx;
			let mut tail = 0#uxx;
			while i < count {
				let lsn = list.get(i) !! break;;
				if lsn.fd > -1 {
					if tail < i {
						list.set(tail, lsn)!;
					}
					tail++;
				}
				i++;
			}
			while tail < i {
				list.remove(tail);
				tail++;
			}
		}
		return kos.ki_os__poll_wait(this.os_poll, timeout);
	}

	public func __before_free() void {

		each this.listeners as li {
			//mem:free(li -> ptr);
			li.__free();
		}

		kos.ki_os__poll_free(this.os_poll);
	}
}

struct PollListener {
	private os_poll: ptr;
    readonly key: uxx = 0;
	readonly fd : i32 = -1;
    private state: u32 = 0;

	public func read(v: bool) void {
		if(v) {
			this.state = this.state | 0x1;
		} else if (this.state & 0x1) > 0 {
			this.state = this.state ^ 0x1;
		}
		kos.ki_os__poll_update_fd(this.os_poll, this, this.state);
	}
	public func write(v: bool) void {
		if(v) {
			this.state = this.state | 0x2;
		} else if (this.state & 0x2) > 0 {
			this.state = this.state ^ 0x2;
		}
		kos.ki_os__poll_update_fd(this.os_poll, this, this.state);
	}
	public func error(v: bool) void {
		if(v) {
			this.state = this.state | 0x4;
		} else if (this.state & 0x4) > 0 {
			this.state = this.state ^ 0x4;
		}
		kos.ki_os__poll_update_fd(this.os_poll, this, this.state);
	}
	public func close(v: bool) void {
		if(v) {
			this.state = this.state | 0x8;
		} else if (this.state & 0x8) > 0 {
			this.state = this.state ^ 0x8;
		}
		kos.ki_os__poll_update_fd(this.os_poll, this, this.state);
	}
	public func is_stopped_reading(v: bool) void {
		if(v) {
			this.state = this.state | 0x10;
		} else if (this.state & 0x10) > 0 {
			this.state = this.state ^ 0x10;
		}
		kos.ki_os__poll_update_fd(this.os_poll, this, this.state);
	}
}

struct PollResult {
	private events: ptr;
	readonly count: u32;

	public func get(index: u32) ?PollEvent {
		if(index >= this.count) {
			return null;
		}
		let adr : ptr = this.events + (index * sizeof(PollEvent));
		return adr -> PollEvent;
	}
}

struct PollEvent {
    readonly listener: PollListener;
    readonly state: u32;
	// States
    // 0x1  : in
    // 0x2  : out
    // 0x4  : err
    // 0x8  : closed
    // 0x10 : stopped_reading

	public func is_readable() bool {
		return (this.state & 0x1) > 0;
	}
	public func is_writable() bool {
		return (this.state & 0x2) > 0;
	}
	public func is_error() bool {
		return (this.state & 0x4) > 0;
	}
	public func is_closed() bool {
		return (this.state & 0x8) > 0;
	}
	public func is_stopped_reading() bool {
		return (this.state & 0x10) > 0;
	}
}


