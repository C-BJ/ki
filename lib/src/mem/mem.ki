
header "ki_os" as os;

func alloc(size: uxx) ptr {
	return os.ki_os__alloc(size);
}
func free(adr: ptr) void {
	os.ki_os__free(adr);
}

func sys_alloc(size: uxx) ptr {
	return os.ki_os__alloc(size);
}
func sys_free(adr: ptr) void {
	os.ki_os__free(adr);
}

func clear(adrc: ptr, size: uxx) void {
	let chunks = size / sizeof(ptr);
	let i : uxx = chunks;
	while i > 0 {
		i--;
		@ptrv(adrc, uxx, i) = 0;
	}
	rep adrc = adrc + chunks * sizeof(uxx);
	i = size % sizeof(uxx);
	while i > 0 {
		i--;
		@ptrv(adrc, u8, i) = 0;
	}
}

func copy(from: ptr, to: ptr, len: uxx) void {

	let chunks = len / sizeof(ptr);
	let i : uxx = chunks;
	while i > 0 {
		i--;
		@ptrv(to, uxx, i) = @ptrv(from, uxx, i);
	}
	rep from = from + chunks * sizeof(uxx);
	rep to = to + chunks * sizeof(uxx);
	i = len % sizeof(uxx);
	while i > 0 {
		i--;
		@ptrv(to, u8, i) = @ptrv(from, u8, i);
	}
}

func equal(a: ptr, b: ptr, length: uxx) bool {
	let chunks = length / sizeof(ptr);
	let i : uxx = chunks;
	while i > 0 {
		i--;
		let av = @ptrv(a, uxx, i);
		let bv = @ptrv(b, uxx, i);
		if(av != bv) {
			return false;
		}
	}
	i = length % sizeof(ptr);
	let offset = chunks * sizeof(ptr);
	let ao = a + offset;
	let bo = b + offset;
	while i > 0 {
		i--;
		let av = @ptrv(ao, u8, i);
		let bv = @ptrv(bo, u8, i);
		if(av != bv) {
			return false;
		}
	}
	return true;
}