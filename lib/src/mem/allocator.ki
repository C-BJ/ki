
class Allocator norc {
	first: Block = null;
	current: Block;
	block_count: uxx;
	total_slots: uxx;
	total_slots_used: uxx;
	slot_size: uxx;
	slot_count: u16;

	static func init(uxx slot_size) Allocator {
		let count = 4#u16;
		let alc = sys_alloc(sizeof(Allocator)) -> Allocator;
		let block = Block.create(alc, slot_size, count -> u8);
		alc.first = block;
		alc.current = block;
		alc.block_count = 1;
		alc.slot_size = slot_size;
		alc.slot_count = count;
		alc.total_slots += count;
		alc.total_slots_used = 0;

		return alc;
	}

	func get_slot() ptr {
		let mut b = this.current;
		while true {
			if b.has_open_slot() {
				return b.get_slot();
			}
			b = b.next ?! break;;
		}
		// No open slots
		// Decide to create new block or use previous blocks
		if this.block_count < 10 || (this.total_slots / this.total_slots_used) < 2 {
			// Create new block
			let mut count = this.slot_count;
			count *= 2;
			if count > 250 {
				count = 250;
			}
			this.slot_count = count;
			let nb = Block.create(this, this.slot_size, count -> u8);
			b.next = nb;
			nb.prev = b;
			this.current = nb;
			this.block_count+=1;
			return nb.get_slot();
		}
		//
		this.current = this.first;
		return this.get_slot();
	}

}
