
use io;
use net;
use utils;
use fs;

class Connection {
	netcon: net:Connection;
	fd: i32;
	uploads: ?Array[String] = null;
	read_buf: utils:ByteBuffer = utils:ByteBuffer.init(500);

	// Parsing
	phase: uxx = 0;
	parse_pos: uxx = 0;
	line: utils:ByteBuffer = utils:ByteBuffer.init(200);
	headers_parsed: bool = false;
	headers: Map[String] = Map[String].init();
	request_method: String = "GET";
	request_path: String = "/";
	request_protocol: String = "HTTP/1.1";

	// Response
	out_file: ?fs:FileStream = null;
	out_buf: utils:ByteBuffer = utils:ByteBuffer.init(500);
	out_pos: uxx = 0;

	func parse_headers() void !sent_error {
		if this.headers_parsed {
			return;
		}

		let phase = this.phase;
		let pos = this.parse_pos;
		let read_buf = this.read_buf;
		let line = this.line;
		let length = read_buf.length;
		let data = read_buf.data;
		let prev_ch = '\0';
		if line.length > 0 {
			prev_ch = @ptrv(line.data, u8, line.length - 1);
		}
		while pos < length {
			let ch = @ptrv(data, u8, pos);
			pos++;

			if prev_ch == '\r' && ch == '\n' {

				line.length--; // Remove \r

				if line.length == 0 {
					this.headers_parsed = true;
					break;
				}

				if phase == 1 {
					// Header
					let headers = this.headers;
					let split_index = line.index_of_byte(':') !! {
						this.respond(Response.error(400)); // Invalid request
						throw sent_error;
					};
					// Key
					let key = line.sub_str(0, split_index).to_lower();
					// Value
					let value_start_index = split_index + 1;
					let value_index = line.index_where_byte_is_not(' ', value_start_index) !? value_start_index;
					let value = line.sub_str(value_index, line.length - value_index);

					headers.set(key, value);

					//if key == "content-length" {
					//}

				} else if phase == 0 {
					// HTTP line
					let first_space_index = line.index_of_byte(' ') !! {
						this.respond(Response.error(400)); // Invalid request
						throw sent_error;
					};
					let second_space_index = line.index_of_byte(' ', first_space_index + 1) !! {
						this.respond(Response.error(400)); // Invalid request
						throw sent_error;
					};
					// Method
					let method = line.sub_str(0, first_space_index);
					// Path
					let path_index = first_space_index + 1;
					let path = line.sub_str(path_index, second_space_index - path_index);
					// Protocol
					let proto_index = second_space_index + 1;
					let proto = line.sub_str(proto_index, line.length - proto_index);
					if proto != "HTTP/1.1" && proto != "HTTP/1.0" {
						this.respond(Response.error(415)); // Unsupported protocol
						throw sent_error;
					}

					this.request_method = method;
					this.request_path = path;
					this.request_protocol = proto;
					
					phase = 1;
				}

				line.clear();
				prev_ch = '\n';
				continue;
			}
			line.append_byte(ch);
			prev_ch = ch;
		}

		this.parse_pos = pos;
	}

	func send_file(stream:  >fs:FileStream, filename: ?String) void {

		let out = this.out_buf;
		let path = stream.path;
		let fsize = fs:size(path);
		let ext = fs:ext(path);
		let mime = fs:mime(ext);

		this.out_file = stream;

		out.append_str("HTTP/1.1 200 OK\r\nContent-Type: %\r\nContent-Length: %\r\n"{ mime, fsize.str() });

		if isset(filename) {
			out.append_str("Content-Disposition: attachment; filename=\"" + filename + "\"\r\n");
		}

		out.append_str("\r\n");

		this.send_response_bytes();
	}

	func respond(resp: Response) void {
		resp.compile(this.out_buf);
		this.send_response_bytes();
	}

	func has_data_to_send() bool {
		if this.out_pos < this.out_buf.length {
			return true;
		}
		let file = this.out_file;
		if isset(file) {
			if file.reading {
				return true;
			}
		}
		return false;
	}

	// Returns 'true' if all bytes were sent
	func send_response_bytes() void {

		let out = this.out_buf;

		// Check file stream
		let file = this.out_file;
		if isset(file) {
			if file.reading {
				let part = file.read(65535) !? "";
				out.append_str(part);
			}
		}

		let pos = this.out_pos;
		let bytes = out.length - pos;
		if bytes > 0 {
			let wbytes = io:write_from_ptr(this.fd, out.data + pos, bytes) !? 0;
			this.out_pos += wbytes;
		}
	}

}


