
header "ki_os" as kos;

use ki:os;
use ki:net;
use ki:io;

class ServerData async {
	connections: AsyncArray[Connection];
	socket: net:SocketTCP;
}

class Server {
	host: String;
	handler: fn(Request)(Response);
	max_connections: uxx;
	data: ServerData;
	port: u16;


	static func init(host: +String, port: u16, handler: fn(Request)(Response)) .Server !socket_init_error {

		let max_connections : uxx = 10000;
		let socket = net:Socket.init_tcp(host, port) !! throw socket_init_error;;

		return Server{
			host: host,
			port: port,
			handler: handler,
			max_connections: max_connections,
			data: ServerData {
				socket: socket,
				connections: AsyncArray[Connection].init(max_connections),
			}
		};
	}

	func .start(mut worker_count: i32 = 8) void {

		// SIGINT
        os:signal(os:SIG.hup, interrupt);
        // SIGPIPE
        os:signal_ignore(os:SIG.pipe);

		if worker_count < 1 {
			worker_count = 1;
		}
		if worker_count > 128 {
			worker_count = 128;
		}

		println("[+] Running http server on port " + this.port.str());
		println("[+] Worker count: " + worker_count.str());

		worker_count--;
		while worker_count > 0 {
			worker_count--;
			let thread = os:Thread[ServerData].start(Server.worker, this.data);
		}
		Server.worker(this.data);
		os:sleep_ms(200);
	}

	private static func worker(data: ServerData) void {
		let cons = data.connections;

		let sock = data.socket;
		let sock_fd = sock.fd;

		let poll = io:Poll.init();
		let sock_lsn = poll.listener(sock_fd);
		sock_lsn.read(true);

		while true {
			let result = poll.wait();
			let result_count = result.count;
			let mut i : u32 = 0;

			println("event");

			while i < result_count {
				let event = result.get(i) ?! break;;
				i++;

				if event.fd == sock_fd {
					// New connection
					println("accept");
					let netcon = sock.accept();

					let httpcon = Connection {
						netcon: netcon,
					};

					continue;
				}

				// Existing connection

			}
		}

		println("Socket: " + sock_fd.str());
	}

}

global interrupted : bool;
func interrupt(sig: i32) void {
    if(interrupted){
        os:exit(1);
    }
    interrupted = true;
    println("Interrupt - Stopping http servers...");
    os:exit(1);
}
