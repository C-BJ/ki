
header "ki_os" as kos;

use ki:os;
use ki:net;

class Server async {
	host: String;
	handler: fn(Request)(Response);
	connections: AsyncArray[Connection];
	max_connections: uxx;
	socket: .net:SocketTCP;
	//
	port: u16;


	static func init(host: +String, port: u16, handler: fn(Request)(Response)) .Server !socket_init_error {

		let max_connections : uxx = 10000;
		let socket = net:Socket.init_tcp(host, port) !! throw socket_init_error;;

		return Server{
			host: host,
			port: port,
			handler: handler,
			connections: AsyncArray[Connection].init(max_connections),
			max_connections: max_connections,
			socket: socket,
		};
	}

	func .start(mut worker_count: i32 = 8) void {

		// SIGINT
        os:signal(os:SIG.hup, interrupt);
        // SIGPIPE
        os:signal_ignore(os:SIG.pipe);

		if worker_count < 1 {
			worker_count = 1;
		}
		if worker_count > 128 {
			worker_count = 128;
		}

		println("[+] Running http server on port " + this.port.str());
		println("[+] Worker count: " + worker_count.str());

		worker_count--;
		while worker_count > 0 {
			worker_count--;
			let thread = os:Thread[Server].start(Server.worker, this);
		}
		Server.worker(this);
		os:sleep_ms(200);
	}

	private static func worker(server: Server) void {
		let cons = server.connections;

		println("hello");
	}

}

global interrupted : bool;
func interrupt(sig: i32) void {
    if(interrupted){
        os:exit(1);
    }
    interrupted = true;
    println("Interrupt - Stopping http servers...");
    os:exit(1);
}
