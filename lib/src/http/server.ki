
header "ki_os" as kos;

use ki:os;
use ki:net;
use ki:io;
use ki:utils;

class ServerData async {
	max_connections: uxx;
	socket: net:SocketTCP;
	thread_nr: uxx = 0;
}

class Server {
	host: String;
	handler: fn(Request)(Response);
	data: ServerData;
	port: u16;


	static func init(host: +String, port: u16, handler: fn(Request)(Response)) .Server !socket_init_error {

		let max_connections : uxx = 10000;
		let socket = net:Socket.init_tcp(host, port) !! throw socket_init_error;;

		return Server{
			host: host,
			port: port,
			handler: handler,
			data: ServerData {
				socket: socket,
				max_connections: max_connections,
			}
		};
	}

	func .start(mut worker_count: i32 = 16) void {

		// SIGINT
        os:signal(os:SIG.hup, interrupt);
        // SIGPIPE
        os:signal_ignore(os:SIG.pipe);

		if worker_count < 1 {
			worker_count = 1;
		}
		if worker_count > 128 {
			worker_count = 128;
		}

		println("[+] Running http server on port " + this.port.str());
		println("[+] Worker count: " + worker_count.str());

		worker_count--;
		while worker_count > 0 {
			worker_count--;
			let thread = os:Thread[ServerData].start(Server.worker, this.data);
		}
		Server.worker(this.data);
		os:sleep_ms(200);
	}

	private static func worker(data: ServerData) void {
		let max_connections = data.max_connections;
		let cons = Array[Connection].init(50);
		let index_pool = utils:Pool[uxx].init(max_connections);
		let nr = atomicop data.thread_nr ADD 1;

		let nr_str = nr.str();
		println("[-] Start thread: " + nr.str());

		let sock = data.socket;
		let sock_fd = sock.fd;

		let poll = io:Poll.init();
		let sock_lsn = poll.listener(sock_fd);
		sock_lsn.read(true);

		while true {
			let result = poll.wait();
			let result_count = result.count;
			let mut i : u32 = 0;

			while i < result_count {
				let event = result.get(i) ?! break;;
				i++;

				let lsn = event.listener;
				let fd = lsn.fd;

				//println("👋 Event thread: " + nr.str() + " | FD: " + fd.str());

				if fd == sock_fd {
					// New connection
					let netcon = sock.accept() !! {
						continue;
					};

					let fd = netcon.fd;
					println("[+] New connection: " + fd.str());

					let mut index = index_pool.pop() !? max_connections;
					if index == max_connections {
						let http_con = Connection {
							netcon: netcon,
							fd: fd,
						};
						index = cons.push(http_con);
					} else {
						// Clear existing connection io buffers
						let http_con = cons.get(index) !! {
							io:close(fd);
							continue;
						};
						http_con.fd = fd;
						http_con.netcon = netcon;
					}

					let lsn = poll.listener(fd, index);
					lsn.read(true);
					lsn.stopped_reading(true);

					continue;
				}

				// Get connection
				let index = lsn.key;
				let http_con = cons.get(index) !! {
					println("❓ Missing http connection : " + nr.str());
					io:close(fd);
					poll.remove(lsn);
					index_pool.add(index)!;
					continue;
				};

				if http_con.fd != fd {
					println("❗ fd changed : " + nr.str() + " | " + http_con.fd.str() + " -> " + fd.str() + " | key: " + lsn.key.str());
					io:close(fd);
					poll.remove(lsn);
					index_pool.add(index)!;
					continue;
				}

				// Existing connection
				if event.wants_to_close() {
					println("[+] Close connection: " + fd.str());
					io:close(fd);
					poll.remove(lsn);
					index_pool.add(index)!;
					continue;
				}

				if event.is_writable() {
					println("send more: " + nr.str());
					continue;
				}
				if event.is_readable() {
					Server.respond(http_con);
					continue;
				}
			}
		}

		println("Socket: " + sock_fd.str());
	}

	static func respond(http_con: Connection) void {

		let buf_size : i32 = 65535;
		let sbuf : ptr = stack_alloc(buf_size);
		while true {
			let rcvd = kos.ki_os__fd_read(http_con.fd, sbuf, buf_size);
			if (rcvd == -2){
				// EAGAIN
				break;
			} else if (rcvd < 0){
				break;
			} else if (rcvd == 0){
				break;
			}
			if(rcvd < buf_size) {
				break;
			}
		}

		let resp = "HTTP/1.1 200 OK\r\nContent-Length: 13\r\nConnection: keep-alive\r\nContent-Type: text/html\r\n\r\nHello, World!";

		io:write(http_con.fd, resp);
		//io:close(http_con.fd);
		//println("❌ Close");
	}
}

global interrupted : bool;
func interrupt(sig: i32) void {
    if(interrupted){
        os:exit(1);
    }
    interrupted = true;
    println("Interrupt - Stopping http servers...");
    os:exit(1);
}
