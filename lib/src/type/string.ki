
// const:   {string_length:uxx}-1-{...string bytes...}
// dynamic: {string_length:uxx}-0-{pad 3}-{ref_count:u32}-{...string bytes...}

use mem;

class String type:ptr {

	func is_const() bool {
		let adr = this -> ptr;
		return (ptrv (adr + sizeof(uxx)) as u8) == 1#u8;
	}

	func bytes() uxx {
		return ptrv (this -> ptr) as uxx;
	}

	func rc() u32 {
		if(this.is_const()) { return 666; } // Let the person who has insight calculate the number of the beast, for it is the number of a man. That number is 666.
		let mut adr = this -> ptr;
		adr += sizeof(uxx) + 1;
		return ptrv adr as u32;
	}

	func data() ptr {
		let mut adr = this -> ptr;
		if(this.is_const()){
			adr += sizeof(uxx) + 1;
		} else {
			adr += sizeof(uxx) + 5;
		}
		return adr;
	}

	func __ref() void {
	}

	func __add(str: String) String {
		//return "123\n";
		let this_len = this.bytes();
		let str_len = str.bytes();
		let len = this_len + str_len;
		let new_str = String.make_empty(len);
		let mut new_adr = new_str.data();
		mem:copy(this.data(), new_adr, this_len);
		new_adr += this_len;
		mem:copy(str.data(), new_adr, str_len);
		return new_str;
	}

	static func make_empty(size: uxx) String {
		let mut adr = mem:alloc(size + 16);
		let adr_ = adr;
		ptrv adr as uxx = size;
		adr += sizeof(uxx);
		ptrv adr as u8 = 0#u8;
		adr += 4;
		ptrv adr as u32 = 0#u32;
		return adr_ -> String;
	}

}
