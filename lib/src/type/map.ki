
macro map {
	input {
		"[]" type;
		"{}" values @repeat @replace("=>", ",");
	}
	output {
		"@vs : Map[%type] {\n"
		"let map = Map[%type].init();\n"
		"map.set(%values);\n"
		"return map;\n"
		"}"
	}
}

// TODO : Use hash maps
class Map[T] {
	readonly _keys : Array[String] = Array[String].init();
	readonly _values : Array[T] = Array[T].init();

	static func init() CLASS {
		return CLASS{};
	}

	func set(key: String, value: T) void {
		let index = this._keys.index_of(key) !! {
			// Set new key / value
			this._keys.push(key);
			this._values.push(value);
			return;
		};
		// Update existing key / value
		this._values.set(index, value) !! return;;
	}

	func get(key: *String) &T !not_found {
		let index = this._keys.index_of(key) !! throw not_found;;
		return this._values.get(index) !! throw not_found;;
	}

	func __each_init() uxx {
		return 0;
	}

	func __each(key_index_ref: *uxx[1]) &String !end {
		let key_i = key_index_ref[0];
		let key_v = this._keys.get(key_i) !! throw end;;
		key_index_ref[0] = key_i + 1;
		return key_v;
	}
}
