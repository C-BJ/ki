
header "sys" as sys;

use mem;
use os;

class SocketTCP async {
	~fd: i32;
	~port: u16;

	static fn new(host: *String, port: u16) SocketTCP !os_socket_create !get_addr_info !bind !listen {

        #if OS == win
		os:WSA_init();
		#end

        #if OS == linux
    	let fd = sys.socket(sys.OS.AF_INET, sys.OS.SOCK_STREAM | sys.OS.SOCK_NONBLOCK, 0);
		#else
    	let fd = sys.socket(sys.OS.AF_INET, sys.OS.SOCK_STREAM, 0);
        #if OS == macos
		let flags = sys.fcntl(fd, sys.OS.F_GETFL, 0);
		if flags >= 0 : sys.fcntl(fd, sys.OS.F_SETFL, flags | sys.OS.O_NONBLOCK);
		#end
        #if OS == win
		rep fd = os:WSA_unix_fd(fd);
		#end
		#end

    	if fd == -1 {
        	//#if OS == win
			//println("WSA socket error: " + sys.WSAGetLastError().str());
			//#end
			throw os_socket_create;
    	}

		let yes : i32 = 1;
		let yes_ptr = @ptr_of(yes);
    	sys.setsockopt(fd, sys.OS.SOL_SOCKET, sys.OS.SO_REUSEADDR, yes_ptr, @sizeof(i32));
    	//sys.setsockopt(fd, sys.OS.SOL_SOCKET, sys.OS.SO_REUSEPORT, yes_ptr, @sizeof(i32));
		
		let addrinfo : ?sys.cstruct_addrinfo = null;
		let hints = @stack_object(sys.cstruct_addrinfo);
		mem:clear(hints @as ptr, @sizeof_class(sys.cstruct_addrinfo));
		hints.ai_family = sys.OS.AF_INET;
		hints.ai_socktype = sys.OS.SOCK_STREAM;
		hints.ai_flags = sys.OS.AI_PASSIVE;

		let chost = host.to_c_string();
		let cport = port.str().to_c_string();
    	let err = sys.getaddrinfo(chost, cport, hints, @array_of(addrinfo));
		if err != 0 {
			throw get_addr_info;
		}
		rep addrinfo = addrinfo ?! {
			throw get_addr_info;
		};

        #if OS == win
    	err = sys.bind(fd, addrinfo.ai_addr, addrinfo.ai_addrlen @as i32);
		#else
    	err = sys.bind(fd, addrinfo.ai_addr, addrinfo.ai_addrlen);
		#end
		if err != 0 {
			throw bind;
		}

    	err = sys.listen(fd, 2000000);
		if err != 0 {
			throw listen;
		}

		sys.freeaddrinfo(addrinfo);

		return SocketTCP{
			port: port,
			fd: fd,
		};
	}

	fn accept() Connection !error {
        #if OS == linux
		let fd = sys.accept4(this.fd, null, null, sys.OS.SOCK_NONBLOCK);
		#else
		let fd = sys.accept(this.fd, null, null);
        #if OS == macos
		let flags = sys.fcntl(fd, sys.OS.F_GETFL, 0);
		if flags >= 0 : sys.fcntl(fd, sys.OS.F_SETFL, flags | sys.OS.O_NONBLOCK);
		#end
        #if OS == win
		rep fd = os:WSA_unix_fd(fd);
		#end
		#end
		if fd == -1 {
			throw error;
		}
		return Connection {
			fd: fd,
		};
	}

	fn clone() CLASS {
		return CLASS {
			fd: this.fd,
			port: this.port,
		};
	}
}