
header "ki_os" as kos;

class Mutex[T] async {

	readonly mutex: ptr;

	#if TYPE_IS_VOID T

	// VOID

	public static func make() CLASS { 
		let m = CLASS { mutex: kos.ki_os__mutex_create() };
		return m;
	}

	public func lock() void {
		kos.ki_os__mutex_lock(this.mutex);
	}

	public func unlock() void {
		kos.ki_os__mutex_unlock(this.mutex);
	}

	#else

	// NONE VOID

	value: *T;

	public static func make(value: **T) CLASS { 
		let m = CLASS { mutex: kos.ki_os__mutex_create(), value: value };
		return m;
	}

	public func lock() *T {
		kos.ki_os__mutex_lock(this.mutex);
		return this.value;
	}

	public func unlock(value: **T) void {
		this.value = value;
		kos.ki_os__mutex_unlock(this.mutex);
	}
	#end

	public func __before_free() void {
		kos.ki_os__mutex_free(this.mutex);
	}
}
