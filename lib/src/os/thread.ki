
header "pthread" as pt;

use ki:mem;

struct ThreadEntry[F, T] {
	public data: T;
	start_func: F;
}

class Thread[T] {

	private os_thread: pt.pthread_t;

	private static func entry(data: ptr) void {
		let entry = data @as ThreadEntry[fn(T)(void), T];
		entry.start_func(entry.data @as T);
		mem:free(entry @as ptr);
	}

	static func start(start_func: fn(T)(void), data: async T) CLASS !fail {

		let entry_data = ThreadEntry[fn(T)(void), T]{
			start_func: start_func,
			data: data
		};
    	let thr = mem:alloc(@sizeof_class(pt.pthread_t)) @as pt.pthread_t;
    	let err = pt.pthread_create(thr, null, CLASS.entry, entry_data @as ptr);
    	if err != 0 {
			throw fail;
    	}
		let t = CLASS{ os_thread: thr };
    	return t;
	}
}

