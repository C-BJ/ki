
header "sys" as sys;

func sleep_ms(ms: uxx) void {
	let msec = ms @as ixx;
	let ts = @stack_object(sys.cstruct_timespec);
    ts.tv_sec = msec / 1000;
    ts.tv_nsec = (msec % 1000) * 1000000;
    sys.nanosleep(ts, ts);
}

func sleep_ns(ns: uxx) void {
	let nsec = ns @as ixx;
	let ts = @stack_object(sys.cstruct_timespec);
    ts.tv_sec = nsec / 1000000000;
    ts.tv_nsec = (nsec % 1000000000);
    sys.nanosleep(ts, ts);
}

func !panic(msg: *String) void {
	print("PANIC ERROR : ");
	print(msg);
	print("\n");
	exit(1);
}

func !exit(code: i32) void {
	sys.exit(code);
}

//func parse_args(i32 argc, ptr argv) Array<String> {
//	let res = Array[String].make(argc);
//	while(argc > 0) {
//		argc--;
//		let cstr = @ptrv(argv, cstring, 0);
//		argv += @sizeof(ptr);
//		res.push(cstr.str());
//	}
//	return res;
//}

